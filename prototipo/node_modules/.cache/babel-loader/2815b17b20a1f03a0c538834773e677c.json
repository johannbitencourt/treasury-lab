{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = require(\"react\");\n\nfunction useEventListener(eventName, handler) {\n  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window; // Create a ref that stores handler\n\n  var savedHandler = (0, _react.useRef)(); // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n\n  (0, _react.useEffect)(function () {\n    savedHandler.current = handler;\n  }, [handler]);\n  (0, _react.useEffect)(function () {\n    // Make sure element supports addEventListener\n    // On\n    var isSupported = element && element.addEventListener;\n    if (!isSupported) return; // Create event listener that calls handler function stored in ref\n\n    var eventListener = function eventListener(event) {\n      return savedHandler.current(event);\n    }; // Add event listener\n\n\n    element.addEventListener(eventName, eventListener); // Remove event listener on cleanup\n    // eslint-disable-next-line consistent-return\n\n    return function () {\n      element.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element] // Re-run if eventName or element changes\n  );\n}\n\nvar _default = useEventListener;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/workspace/treasury/prototipo/node_modules/mui-layout/dist/hooks/useEventListener.js"],"names":["Object","defineProperty","exports","value","_react","require","useEventListener","eventName","handler","element","arguments","length","undefined","window","savedHandler","useRef","useEffect","current","isSupported","addEventListener","eventListener","event","removeEventListener","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,OAArC,EAA8C;AAC5C,MAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEG,MAAlF,CAD4C,CAE5C;;AACA,MAAIC,YAAY,GAAG,CAAC,GAAGV,MAAM,CAACW,MAAX,GAAnB,CAH4C,CAGH;AACzC;AACA;AACA;;AAEA,GAAC,GAAGX,MAAM,CAACY,SAAX,EAAsB,YAAY;AAChCF,IAAAA,YAAY,CAACG,OAAb,GAAuBT,OAAvB;AACD,GAFD,EAEG,CAACA,OAAD,CAFH;AAGA,GAAC,GAAGJ,MAAM,CAACY,SAAX,EAAsB,YAAY;AAChC;AACA;AACA,QAAIE,WAAW,GAAGT,OAAO,IAAIA,OAAO,CAACU,gBAArC;AACA,QAAI,CAACD,WAAL,EAAkB,OAJc,CAIN;;AAE1B,QAAIE,aAAa,GAAG,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AAChD,aAAOP,YAAY,CAACG,OAAb,CAAqBI,KAArB,CAAP;AACD,KAFD,CANgC,CAQ7B;;;AAGHZ,IAAAA,OAAO,CAACU,gBAAR,CAAyBZ,SAAzB,EAAoCa,aAApC,EAXgC,CAWoB;AACpD;;AAEA,WAAO,YAAY;AACjBX,MAAAA,OAAO,CAACa,mBAAR,CAA4Bf,SAA5B,EAAuCa,aAAvC;AACD,KAFD;AAGD,GAjBD,EAiBG,CAACb,SAAD,EAAYE,OAAZ,CAjBH,CAiBwB;AAjBxB;AAmBD;;AAED,IAAIc,QAAQ,GAAGjB,gBAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBqB,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = require(\"react\");\n\nfunction useEventListener(eventName, handler) {\n  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window;\n  // Create a ref that stores handler\n  var savedHandler = (0, _react.useRef)(); // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n\n  (0, _react.useEffect)(function () {\n    savedHandler.current = handler;\n  }, [handler]);\n  (0, _react.useEffect)(function () {\n    // Make sure element supports addEventListener\n    // On\n    var isSupported = element && element.addEventListener;\n    if (!isSupported) return; // Create event listener that calls handler function stored in ref\n\n    var eventListener = function eventListener(event) {\n      return savedHandler.current(event);\n    }; // Add event listener\n\n\n    element.addEventListener(eventName, eventListener); // Remove event listener on cleanup\n    // eslint-disable-next-line consistent-return\n\n    return function () {\n      element.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element] // Re-run if eventName or element changes\n  );\n}\n\nvar _default = useEventListener;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}